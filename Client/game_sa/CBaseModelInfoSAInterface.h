/*****************************************************************************
 *
 *  PROJECT:     Multi Theft Auto
 *  LICENSE:     See LICENSE in the top level directory
 *  FILE:        game_sa/CBaseModelInfoSAInterface.h
 *
 *  Multi Theft Auto is available from http://www.multitheftauto.com/
 *
 *****************************************************************************/

#pragma once

class CColModelSAInterface;
class RwObject;

enum class eModelSpecialType : unsigned char
{
    NONE = 0,
    TREE = 1,
    PALM = 2,
    GLASS_1 = 4,
    GLASS_2 = 5,
    TAG = 6,
    GARAGE_DOOR = 7,
    CRANE = 9,                // Not present in IDE but used in gta
    UNKNOW_1 = 10,            // Read only
    BREAKABLE_STATUE = 11,
};

/**
 * \todo Fill this class with info from R*
 */
class CBaseModelInfo_SA_VTBL
{
public:
    DWORD Destructor;
    DWORD AsAtomicModelInfoPtr;                  // ()
    DWORD AsDamageAtomicModelInfoPtr;            // ()
    DWORD AsLodAtomicModelInfoPtr;               // ()
    DWORD GetModelType;                          // ()           - Not defined in the base
    DWORD GetTimeInfo;                           // ()
    DWORD Init;                                  // ()
    DWORD Shutdown;                              // ()
    DWORD DeleteRwObject;                        // ()           - Not defined in the base
    DWORD GetRwModelType;                        // ()           - Not defined in the base
    DWORD CreateInstance_;                       // (RwMatrix*)   - Not defined in the base
    DWORD CreateInstance;                        // ()           - Not defined in the base
    DWORD SetAnimFile;                           // (char const*)
    DWORD ConvertAnimFileIndex;                  // ()
    DWORD GetAnimFileIndex;                      // ()
};

class CBaseModelInfoSAInterface
{
public:
    CBaseModelInfo_SA_VTBL* VFTBL;            // +0

    unsigned long  ulHashKey;            // +4   Generated by CKeyGen::GetUppercaseKey(char const *) called by CBaseModelInfo::SetModelName(char const *)
    unsigned short usNumberOfRefs : 16;                 // +8
    unsigned short usTextureDictionary : 16;            // +10
    unsigned char  ucAlpha : 8;                         // +12

    unsigned char  ucNumOf2DEffects : 8;            // +13
    unsigned short usUnknown : 16;                  // +14     Something with 2d effects

    unsigned short usDynamicIndex : 16;            // +16

    // Flags used by CBaseModelInfo
    union
    {
        struct
        {
            unsigned char     bHasBeenPreRendered : 1;            // we use this because we need to apply changes only once
            unsigned char     bAlphaTransparency : 1;             // bDrawLast
            unsigned char     bAdditiveRender : 1;
            unsigned char     bDontWriteZBuffer : 1;
            unsigned char     bDontCastShadowsOn : 1;
            unsigned char     bDoWeOwnTheColModel : 1;
            unsigned char     bIsBackfaceCulled : 1;
            unsigned char     bIsColLoaded : 1;
            unsigned char     bIsRoad : 1;
            unsigned char     bHasComplexHierarchy : 1;
            unsigned char     bDontCollideWithFlyer : 1;
            eModelSpecialType eSpecialModelType : 4;
            unsigned char     bWetRoadReflection : 1;            // Used for tags
        };

        unsigned short usFlags;
    };

    CColModelSAInterface* pColModel;            // +20      CColModel: public CBoundingBox

    float     fLodDistanceUnscaled;            // +24      Scaled is this value multiplied with flt_B6F118
    RwObject* pRwObject;                       // +28

    // CWeaponModelInfo:
    // +36 = Weapon info as int

    // CPedModelInfo:
    // +36 = Motion anim group (AssocGroupID, long)
    // +40 = Default ped type (long)
    // +44 = Default ped stats (ePedStats)
    // +48 = Can drive cars (byte)
    // +50 = Ped flags (short)
    // +52 = Hit col model (CColModel*)
    // +56 = First radio station
    // +57 = Second radio station
    // +58 = Race (byte)
    // +60 = Audio ped type (short)
    // +62 = First voice
    // +64 = Last voice
    // +66 = Next voice (short)

    // CVehicleModelInfo:
    // +36 = Custom plate material (RpMaterial*)
    // +49 = Custom plate design (byte)
    // +50 = Pointer to game name (const char*)
    // +60 = Vehicle type (enum, int)
    // +64 = Wheel scale (float). Front/rear?
    // +68 = Wheel scale (float). Front/rear?
    // +72 = Wheel model id
    // +74 = Vehicle handling ID (word)
    // +76 = Number of doors (byte)
    // +77 = Vehicle list (byte)
    // +78 = Vehicle flags (byte)
    // +79 = Wheel upgrade class (byte)
    // +80 = Number of times used (byte)
    // +82 = Vehicle freq (short)
    // +84 = Component rules mask (long)
    // +88 = Steer angle
    // +92 = Pointer to some class containing back seat position @ +60 probably dummy storage.
    // +180 = Vehicle upgrade position descriptors array (32 bytes each)
    // +720 = Number of possible colors
    // +726 = Word array as referenced in CVehicleModelInfo::GetVehicleUpgrade(int)
    // +762 = Array of WORD containing something relative to paintjobs
    // +772 = Anim file index
};
static_assert(sizeof(CBaseModelInfoSAInterface) == 0x20, "Invalid size for CBaseModelInfoSAInterface");
